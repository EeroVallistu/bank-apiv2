openapi: 3.0.0
info:
  title: Bank API
  version: 1.0.0
  description: Bank API with interoperability features

servers:
  - url: /
    description: Current server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    Account:
      type: object
      properties:
        id:
          type: integer
          description: Account ID
          example: 1
        accountNumber:
          type: string
          description: Unique account number with bank prefix
          example: 71093v31i57k1
        userId:
          type: integer
          description: ID of the account owner
          example: 1
        balance:
          type: number
          format: float
          description: Current account balance
          example: 1000.00
        currency:
          type: string
          enum: [EUR, USD, GBP, SEK]
          description: Account currency
          example: EUR
        name:
          type: string
          description: Account name/description
          example: Main Savings
      required:
        - accountNumber
        - userId
        - currency
        - name
    
    Transaction:
      type: object
      properties:
        id:
          type: integer
          description: Transaction ID
        fromAccount:
          type: string
          description: Source account number
        toAccount:
          type: string
          description: Destination account number
        amount:
          type: number
          format: float
          description: Transaction amount
        currency:
          type: string
          enum: [EUR, USD, GBP]
          description: Transaction currency
        explanation:
          type: string
          description: Transaction description
        senderName:
          type: string
          description: Name of the sender
        receiverName:
          type: string
          description: Name of the receiver
        status:
          type: string
          enum: [pending, inProgress, completed, failed]
          description: Transaction status
        isExternal:
          type: boolean
          description: Whether this is an external transaction
        created_at:
          type: string
          format: date-time
          description: Transaction creation date
  

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Authentication required
    
    PermissionDeniedError:
      description: User does not have required permissions
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Permission denied

    ValidationError:
      description: Input validation error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Validation failed

security:
  - bearerAuth: []

paths:

  /users:
    post:
      summary: Register a new user
      tags: [Users]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
                - fullName
                - email
              properties:
                username:
                  type: string
                  example: jsmith
                password:
                  type: string
                  example: securePass123!
                fullName:
                  type: string
                  example: John Smith
                email:
                  type: string
                  format: email
                  example: john.smith@example.com
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User registered successfully
        '400':
          $ref: '#/components/responses/ValidationError'
        '409':
          description: Conflict - Username or email already in use
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Username or email already in use

  /users/me:
    get:
      summary: Get current user profile
      tags: [Users]
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                      username:
                        type: string
                      fullName:
                        type: string
                      email:
                        type: string
                        format: email
                      created_at:
                        type: string
                        format: date-time
              example:
                data:
                  id: 1
                  username: jsmith
                  email: john.smith@example.com
                  fullName: John Smith
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/PermissionDeniedError'

  /sessions:
    post:
      summary: Login user
      tags: [Sessions]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: jsmith
                password:
                  type: string
                  example: securePass123!
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid credentials
    delete:
      summary: Logout current user
      tags: [Sessions]
      responses:
        '204':
          description: User logged out successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /accounts:
    get:
      summary: Get all accounts for current user
      tags: [Accounts]
      responses:
        '200':
          description: List of user accounts
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Account'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/PermissionDeniedError'
    
    post:
      summary: Create a new account
      tags: [Accounts]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currency
                - name
              properties:
                currency:
                  type: string
                  enum: [EUR, USD, GBP, SEK]
                  example: EUR
                name:
                  type: string
                  example: Main Savings
      responses:
        '201':
          description: Account created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Account'
              example:
                data:
                  name: Main Savings
                  currency: EUR
                  balance: 1000
                  accountNumber: 71093v31i57k1
                  id: 1
                  userId: 1
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/PermissionDeniedError'

  /transfers:
    get:
      summary: Get all transactions for the user
      tags: [Transactions]
      responses:
        '200':
          description: List of user transactions
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
              example:
                status: success
                data:
                  - id: 101
                    fromAccount: "71093v31i57k1"
                    toAccount: "353f9a23d1c7b45e8t91"
                    amount: 250.75
                    currency: EUR
                    explanation: "Invoice payment for May 2025"
                    senderName: "Alice Example"
                    receiverName: "Bob Example"
                    status: completed
                    isExternal: false
                    created_at: "2025-05-18T14:23:00Z"
                  - id: 102
                    fromAccount: "71093v31i57k1"
                    toAccount: "9988aabbccddeeff0011"
                    amount: 100.00
                    currency: USD
                    explanation: "Refund for order #1234"
                    senderName: "Alice Example"
                    receiverName: "Charlie Example"
                    status: pending
                    isExternal: true
                    created_at: "2025-05-19T09:00:00Z"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/PermissionDeniedError'
          
    post:
      summary: Create a new transaction
      tags: [Transactions]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - fromAccount
                - toAccount
                - amount
                - explanation
              properties:
                fromAccount:
                  type: string
                  example: 353c8b72e4a9f15d3b82
                toAccount:
                  type: string
                  example: 353f9a23d1c7b45e8t91
                amount:
                  type: number
                  example: 150.00
                explanation:
                  type: string
                  example: "Payment for services"
      responses:
        '201':
          description: Transaction created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Transaction'
              example:
                data:
                  fromAccount: "353c8b72e4a9f15d3b82"
                  toAccount: "353f9a23d1c7b45e8t91"
                  amount: 150.00
                  explanation: "Payment for services"
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '402':
          description: Insufficient funds
        '403':
          $ref: '#/components/responses/PermissionDeniedError'
        '404':
          description: Account not found


  /transfers/{id}:
    get:
      summary: Get transaction details
      tags: [Transactions]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Transaction details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/Transaction'
              example:
                data:
                  id: 42
                  fromAccount: "353c8b72e4a9f15d3b82"
                  toAccount: "353f9a23d1c7b45e8t91"
                  amount: 150.00
                  currency: EUR
                  explanation: "Detailed reason for the transfer, e.g. 'Invoice #1234 payment for web development services, May 2025'"
                  senderName: "Alice Example"
                  receiverName: "Bob Example"
                  status: completed
                  isExternal: false
                  created_at: "2025-05-19T10:00:00Z"
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Transaction not found
        '403':
          $ref: '#/components/responses/PermissionDeniedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /transactions/b2b:
    post:
      summary: Process incoming transfer (Bank-to-Bank)
      tags: [Bank-to-Bank]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - jwt
              properties:
                jwt:
                  type: string
                  example: eyJhbGciOiJSUzI1NiIsImtpZCI6IjEiLCJ0eXAiOiJKV1QifQ...
      responses:
        '200':
          description: Transaction processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  receiverName:
                    type: string
                    example: John Smith
                  transactionId:
                    type: integer
                    example: 42
        '400':
          description: Invalid JWT or signature
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid JWT or signature
        '404':
          description: Destination account not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Destination account not found
        '500':
          description: Processing error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Processing error

  /jwks.json:
    get:
      summary: Get JSON Web Key Set
      tags: [Security]
      security: []
      responses:
        '200':
          description: JWKS with public keys
          content:
            application/json:
              schema:
                type: object
                properties:
                  keys:
                    type: array
                    items:
                      type: object
                      properties:
                        kty:
                          type: string
                        kid:
                          type: string
                        use:
                          type: string
                        alg:
                          type: string
                        n:
                          type: string
                        e:
                          type: string
              example:
                keys:
                  - kty: "RSA"
                    n: "qO4TWcpdgi5KDtydMZxjnDadxh-5P-QpjV8IemSHdfRVwj0vm0l-Ilvf_ufyK9bXdGMgIwXfR1G6BSLtL11JyGiFuk9ixVZmxiwVsWc51MgAtdFyzaZ0KJoO1MQzS0Mf4-3scxhmFOpvFlW_7FNvsI2mLr2jfncEJErNU5Rns_0eLnF_OietnuPkmV4xWMVJ0XyEZ6h-GN6ItI1zLJoqEEKRIs6H8ZMPAOvcdi2ByZWNRKFzfPQbE6L02fAsQIoXi7TjiVB9AoUS8yWi2GR_Td9eP7jbHG9itT86lwvwSdBGbQ8wGFNiy3OQo6fqHhWIRpAqK13zzLu03UmLa0tAow"
                    e: "AQAB"
                    use: "sig"
                    kid: "1"
                    alg: "RS256"
        '500':
          description: Error retrieving JWKS
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Error retrieving JWKS


  /exchange-rates:
    get:
      summary: Get current exchange rates
      tags: [Currency]
      security: []
      parameters:
        - in: query
          name: base
          required: true
          schema:
            type: string
            enum: [EUR, USD, GBP, SEK]
          description: Base currency
        - in: query
          name: target
          required: false
          schema:
            type: string
            enum: [EUR, USD, GBP, SEK]
          description: Target currency (optional - if not provided returns all rates)
      responses:
        '200':
          description: Current exchange rates
          content:
            application/json:
              schema:
                type: object
                properties:
                  base:
                    type: string
                    example: EUR
                  rates:
                    type: object
                    example:
                      USD: 1.09
                      GBP: 0.86
                      SEK: 11.21
              example:
                base: EUR
                rates:
                  USD: 1.09
                  GBP: 0.86
                  SEK: 11.21
        '400':
          description: Invalid currency
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        msg:
                          type: string
                          example: Base currency must be EUR, USD, GBP, or SEK
